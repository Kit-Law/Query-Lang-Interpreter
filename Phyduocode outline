
Type mappings = ([String], [[String]])			/* Keys, colounms */


Eval :: Input -> ________   					/* Make sure that input is first and then eval */




EvalFiles :: ________ -> mappings				/* out form EvalFile and cross them */

INPUT A : a; B : b;
-- Concat the list of keys form the first with the seocnd, eg: [a, b]
-- Cross A and B


-- a1 a2 a3 b1 b2
-- [[A, B]]

-- Eg: (["a1", "a2", "a3", "b1", "b2"], [[A]] X [[B]])




EvalFile :: _______ -> mappings					/* file name, and read the colunms */

-- Reads the file
-- Creates a list of list of strings for each csv
-- Return the list of keys and the data


-- INPUT A : a1, a2, a3;
-- INPUT B : b1, b2;

-- Eg: (["a1", "a2", "a3"], [[A]])
-- Eg: (["b1", "b2"], [[B]])




EvalWhere :: mappings -> mappings

-- Go though each row and recurse, if con holds then "keep" else "remove"
-- Once at end of list, return the new mappings


EvalOut :: mappings -> _______

-- Store the order of outputs
-- Output to file each row fomr the mappings




EvalFiles <- Read file
stuff
stuff
stuff
EvalOut -> Out file




test.csv:
[1, 1, 1]
[2, 2, 2]
[3, 3, 3]
[4, 4, 4]